# src/utils.py
import json
import os
import sys
import traceback
import subprocess
import webbrowser
from pathlib import Path
from datetime import datetime
from PyQt6.QtGui import QIcon, QPixmap  # QPixmap 추가
from PyQt6.QtCore import QByteArray
from PyQt6.QtWidgets import QMessageBox

CONFIG_FILE = "downloader_config.json"
HISTORY_FILE = Path("urlhistory.json")

def load_config():
    config = {
        "theme": "light",
        "download_folder": "",
        "max_concurrent_downloads": 3,
        "filename_parts": {
            "series": True, "upload_date": True, "episode_number": True,
            "episode": True, "id": True
        },
        "post_action": "None",
        "quality": "bv*+ba/b"
    }
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            try:
                loaded_config = json.load(f)
                for key, value in loaded_config.items():
                    if isinstance(value, dict):
                        config.setdefault(key, {}).update(value)
                    else:
                        config[key] = value
            except json.JSONDecodeError:
                pass  # 기본 설정 사용
    return config

def save_config(config):
    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=4, ensure_ascii=False)

def load_history():
    if HISTORY_FILE.exists():
        with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

def add_to_history(history, url, title):
    history[url] = {
        "title": title,
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f, indent=4, ensure_ascii=False)

def get_startupinfo():
    if os.name == 'nt':
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
        return startupinfo
    return None

def open_file_location(filepath):
    try:
        if sys.platform == 'win32':
            subprocess.run(['explorer', '/select,', os.path.normpath(filepath)])
        elif sys.platform == 'darwin':
            subprocess.run(['open', '-R', filepath])
        else:
            subprocess.run(['xdg-open', os.path.dirname(filepath)])
    except Exception as e:
        pass  # 오류 무시 또는 로그

def handle_exception(exc_type, exc_value, exc_traceback):
    error_message = "".join(traceback.format_exception(exc_type, exc_value, exc_traceback))
    log_file = "TVerDownloader_crash.log"
    with open(log_file, "w", encoding="utf-8") as f:
        f.write(error_message)
    error_box = QMessageBox()
    error_box.setIcon(QMessageBox.Icon.Critical)
    error_box.setText("치명적인 오류가 발생했습니다.")
    error_box.setInformativeText(f"오류의 원인이 '{log_file}' 파일에 저장되었습니다. 개발자에게 문의 시 이 파일을 함께 전달해주세요.")
    error_box.setStandardButtons(QMessageBox.StandardButton.Ok)
    error_box.exec()

APP_ICON_B64 = b'iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAHYAAAB2AH6XKZyAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAABU1JREFUeJztmltsFFUYx39ndroXWyhpbROBKNHSpIVEvJAGqY1yixLDkyQENPrkAzEiD8aoPJgo0RAbAiKC8uItgsFEY4IBagURqqQihhaDNiRYbq6lpKWwtznz+VDbbstuO7vMTrt1f8lJZmfOnvN9/3O+b86cGShQoECBAgUK/F9Rmf6hZvmJBmXIC4LUA5XZtOEyAoQFjvgUW9q/efDHTP6cgfGiqpe1NAqyPkMDPUWExo6DD70ESpzUdyzAPY98t0HgjexN8xBRr549vOgtJ1UdCTCjbt9M0+RPIHhLhnlHxMas6jy67OJYFU1HzenoSm3njfMAIeBJYOtYFR0JYJYWNwTKplFUUgxqvHPeGIhg3YgQ7+ldggMBRvVmzuvhkqKosQORNeOf7LPikBJZ8+umirShkNarBes7Q31G6HugLiemecdF0yfz04mQNgR6dPBN0XnvPMB0K6E+ApamuphyBsx68eo0f1xfBgK5tMxLlCHzz2yraB15PuUMMCJ6kYaAYUAgCIYpEz73jUQEbEsRi4Jtg7J5AnAmQCgk86aWQUnpxE/6oyOIwPUe6O5Sc1PVuMm9JVvC9YjarxS35d5A7xBNHJ8sblpXOexZYZgAj22+NMtS5i9AmafWeYZcQZn3N60r+2vgjJF82VLmRoQyBCZnUeWi9cZknwdnwJK3u0vFr8OAPwNJ85FYNEHF0ZcrrkFSErRN615ETXbnAQLBIpkHHIEkAcSWijxP+Y4RZVQMHA/NAJThbAsh/xGxfQPH5vAL7ncWMBVPLQjRUB2gOKD4/ZLFnuMR2i4k3O/MKUkTfUgADeJyBPhNxeZVpdROH+rm4dl+6mf7aT4dY8fh64R7bXc7dYBK6nLQMo3TXTTnrJgXpOYOH5Jiai2q8bNwdhF7W6N80hIhEvcu/pIlz2kIPHCXmdL5Afw+WF0XZGmtnw9/uMGBtjieyJA004cWQrpfADfLlIByVO/2EoNXlpewdfUUqipN1+0YWdBDAuQ0BPoXYM4bnTvT5INnp3CgLc7OQxGu9OUmP6QNAbfnn4iMGgLpWDaniIZqk90/x/isJUZCu2xY2ruAu90gdnYCAARMeGZhgMW1RbzzbYST5yyXretn2MNQrmMvmzJjmkHjqmIWVrmXG5IZygHa/c0PIfsZkIwCnl8a4mjHNWwX0oKdah0A7t8GM02Co1E5FaaXGnR2u5sYkwRIvWC5FW4lB6RsTxTiwnJVqaHIz2kI2NJf3OByj3C+23ZllnoXAlneBkeibdi6P4bOwbJgwgtw/qpN474EJ8+5571KtQ7Q2v23fyKSdRKMxoXdP2k+P6aJW+6OjGcPQ9m0KQJNpzTvN1tc7cuBQeDdfoAtZBQCpzqFbfst/ric2z2ClPsBgOtr4d4bNiLGmPW6eoVdhzQHT7mT5TMhp0+DrWdt6qrSCxCz4Mvjmk+PaCJxd/seDdurEPi6VXi0VqidObxhEWhut9nZpAn3ejzkMCwL5jQJxhLCuo8tnq43aKgxKAnC6QvCnmOats5xcPw/kocjpyEAEIsLu5o1u5r12JU9ImUIKI3tdghMVAyRwdFIejGi/8EeO2NPBkQZ4YHjQQGMBCe0jyj58zFktsSsoP5t4MfgkLdvr+wTYe947wDluiDsObOp/80wjLgLGOLboNGPA+VeDIX3SJclxobkMzelveq13fWC/RWTTgTpEmWs6HivvCX5bMq8f/dz3XcaPnsjsJL8/1QuCnyBqV7reLf8/MiLo38quzZckhDuE/FViiKvbhFKsLWt/g6Z1sn27ZV9421PgQIFChSYiPwLkzSS+s+cDxUAAAAASUVORK5CYII='

def get_app_icon():
    pixmap = QPixmap()
    pixmap.loadFromData(QByteArray.fromBase64(APP_ICON_B64))
    return QIcon(pixmap)

def open_feedback_link():
    webbrowser.open('https://brunch.co.kr/@sashiko/8')

def open_developer_link():
    webbrowser.open('https://www.youtube.com/@LE_SSERAFIM')